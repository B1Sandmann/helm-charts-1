# see https://github.com/sapcc/maintenance-controller for documentation
intervals:
    requeue: 60s
    notify: 5h
instances:
    notify:
    - slack:
        name: maintenance_started
        config:
          hook: {{ required "a slack webhook should be definied" .Values.slack.webhook }}
          channel: {{ required "a slack channel should be definied" .Values.slack.channel }}
          # the maintenance controller uses go templates as well so we need to quote here
          message: |
            Maintenance Controller: Maintenace for node {{ "{{ .Node.Name }}" }} has started.
    - slack:
        name: notify_operational
        config:
          hook: {{ required "a slack webhook should be definied" .Values.slack.webhook }}
          channel: {{ required "a slack channel should be definied" .Values.slack.channel }}
          # the maintenance controller uses go templates as well so we need to quote here
          message: |
            Maintenance Controller: Node {{ "{{ .Node.Name }}" }} is operational again.
    check:
    - hasAnnotation:
        name: reboot_needed
        config:
            key: flatcar-linux-update.v1.flatcar-linux.net/reboot-needed
            value: "true"
    - maxMaintenance:
        name: check_count
        config:
          max: 1
    trigger:
    - alterAnnotation:
        name: reboot_ok
        config:
            key: flatcar-linux-update.v1.flatcar-linux.net/reboot-ok
            value: "true"
    - alterAnnotation:
        name: remove_reboot_ok
        config:
            key: flatcar-linux-update.v1.flatcar-linux.net/reboot-ok
            remove: true
profiles:
  flatcar:
    operational:
      check: reboot_needed
      notify: notify_operational
    maintenance-required:
      check: check_count
      trigger: reboot_ok
    in-maintenance:
      check: "!reboot_needed"
      notify: maintenance_started
      trigger: remove_reboot_ok