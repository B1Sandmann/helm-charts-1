# This section defines default settings for how queries should be run.
# All settings can be overridden for any given query in its own section.
# The values shown in this example are also the fallback values used if
# a setting is not specified in the DEFAULT section or a query's section.
[DEFAULT]
# How often to run queries.
QueryIntervalSecs = 300

# How long to wait for a query to return before timing out.
QueryTimeoutSecs = 10

# The indices to run the query on.
# Any way of specifying indices supported by your Elasticsearch version can be used.
QueryIndices = _all

# What to do if a query throws an error. One of:
# * preserve - keep the metrics/values from the last successful run.
# * drop - remove metrics previously produced by the query.
# * zero - keep metrics previously produced by the query, but reset their values to 0.
QueryOnError = drop
# What to do if a metric produced by the previous run of a query is not present
# in the current run. One of:
# * preserve - keep the value of the metric from the last run it was present in.
# * drop - remove the metric.
# * zero - keep the metric, but reset its value to 0.
QueryOnMissing = zero

# Queries are defined in sections beginning with 'query_'.
# Characters following this prefix will be used as a prefix for all metrics
# generated for this query

[query_elasticsearch_octobus_keystone]
QueryIntervalSecs = 300
QueryTimeoutSecs = 15
QueryIndices = c0001_log_keystone*
QueryJson = {
        "aggs": {
          "logs": {
             "terms": {
               "field": "kubernetes.container_name.keyword",
               "size": 30
            }
          }
        },
        "size": 0,
        "_source": {
          "excludes": []
        },
        "stored_fields": [
          "*"
        ],
        "script_fields": {},
        "docvalue_fields": [
          {
            "field": "@timestamp",
            "format": "date_time"
          },
          {
            "field": "time",
            "format": "date_time"
          }
        ],
        "query": {
          "bool": {
            "must": [
              {
                "match_all": {}
              },
              {
                "range": {
                  "@timestamp": {
                    "gt": "now-15m",
                    "format": "epoch_millis"
                  }
                }
              }
            ],
            "filter": [],
            "should": [],
            "must_not": []
          }
        }
    }

[query_elasticsearch_octobus_esx]
QueryIntervalSecs = 300
QueryTimeoutSecs = 150
QueryIndices = c0001_log-*
QueryJson = {
        "aggs": {
          "hostsystem": {
            "terms": {
              "field": "node.nodename.keyword",
              "order": {
                "_key": "asc"
              },
            "size": 1000
            }
          }
        },
        "query": {
          "bool": {
            "filter": [
              {
                "exists": {
                  "field": "node.nodename"
                  }
              },
              {
                "range": {
                  "@timestamp": {
                    "gte": "now-2h",
                    "lte": "now-1h"
                  }
                }
              }
            ]
          }
        }
    }

[query_elasticsearch_octobus_vcsa]
QueryIntervalSecs = 300
QueryTimeoutSecs = 150
QueryIndices = c0001_log-*
QueryJson = {
        "aggs": {
          "vcenter": {
            "terms": {
              "field": "fqdn.keyword",
              "order": {
                "_key": "asc"
              },
            "size": 50
            }
          }
        },
        "query": {
          "bool": {
            "filter": [
              {
                "match": {
                  "fqdn": "vc"
                  }
              },
              {
                "range": {
                  "@timestamp": {
                    "gte": "now-2h",
                    "lte": "now-1h"
                  }
                }
              }
            ]
          }
        }
    }

[query_elasticsearch_octobus_vmdown]
QueryIntervalSecs = 300
QueryTimeoutSecs = 150
QueryIndices = c0001_log-*
QueryOnMissing = drop
LabelsFromHits = [ "@timestamp", "node.nodename", "node.building_block", "message" ]
QueryJson = {
    "query": {
      "bool": {
        "must": [
          { "exists": { "field": "node.nodename" }},
          { "match_phrase": { "message": "An operation required the virtual machine to quiesce and the virtual machine was unable to continue running." }}
        ],
        "filter": [
          { "range": { "@timestamp": { "gte": "now-1h" }}}
        ]
      }
    }
  }

[query_elasticsearch_octobus_jumpserver]
QueryIntervalSecs = 300
QueryTimeoutSecs = 15
QueryIndices = c0001_log7_jumphost*
QueryJson = {
        "aggs": {
          "logs": {
             "terms": {
               "field": "host.name",
               "size": 30
            }
          }
        },
        "size": 0,
        "_source": {
          "excludes": []
        },
        "stored_fields": [
          "*"
        ],
        "script_fields": {},
        "docvalue_fields": [
          {
            "field": "@timestamp",
            "format": "date_time"
          },
          {
            "field": "time",
            "format": "date_time"
          }
        ],
        "query": {
          "bool": {
            "must": [
              {
                "match_all": {}
              },
              {
                "range": {
                  "@timestamp": {
                    "gt": "now-15m",
                    "format": "epoch_millis"
                  }
                }
              }
            ],
            "filter": [],
            "should": [],
            "must_not": []
          }
        }
    }


[query_elasticsearch_octobus_keystone_event]
QueryIntervalSecs = 300
QueryTimeoutSecs = 30
QueryIndices = c0001_log_keystone*
QueryJson = {
        "aggs": {
          "processing_time": {
            "range": {
              "script": {
                "source": "def FirstDate =  doc['sap.ocb.timestamps.ccloud.in-https'].value.toInstant().toEpochMilli();\ndef SecondDate = doc['sap.ocb.timestamps.ccloud.out-elasticsearch'].value.toInstant().toEpochMilli();\nreturn (SecondDate-FirstDate)/ 1000.0",
                "lang": "painless"
              },
            "ranges": [
              {"to": 60.00},
              {"from": 60.00, "to": 300.00 },
              {"from": 300.00, "to": 900.00},
              {"from": 900.00, "to": 3600.00},
              {"from": 3600.00 }
              ]
            }
          }
        },
        "size": 0,
        "stored_fields": [
          "*"
        ],
        "_source": {
          "excludes": []
        },
        "query": {
          "bool": {
            "must": [],
            "filter": [
              {
                "match_all": {}
              },
              {
                "range": {
                  "@timestamp": {
                          "gte": "now-1h",
                          "format": "strict_date_optional_time"
                  }
                }
              }
            ],
            "should": [],
            "must_not": []
          }
        }
      }
