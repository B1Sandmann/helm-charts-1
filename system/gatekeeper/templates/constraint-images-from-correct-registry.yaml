apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: gkimagesfromcorrectregistry
spec:
  crd:
    spec:
      names:
        kind: GkImagesFromCorrectRegistry
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          properties:
            registry:
              type: string
            registryAlternateRegion:
              type: string

  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package imagesfromcorrectregistry

        extract_keppel_region(image) = region {
          matchList := regex.find_all_string_submatch_n(`^keppel\.([-\w]*)`, image, 1)
          count(matchList) > 0
          region = matchList[0][1]
        }

        correct_regions[region] {
          region = extract_keppel_region(input.parameters.registry)
        }

        correct_regions[alternate_region] {
          alternate_region = extract_keppel_region(input.parameters.registryAlternateRegion)
        }

        violation[{"msg": msg, "details": {"container": container_name, "image": image}}] {
          input.review.object.kind == "Pod"
          container := input.review.object.spec.containers[_]
          container_name := container.name
          image := container.image

          current_region = extract_keppel_region(image) # this will also check if image is using Keppel or not
          current_region != "global" # global registry is also an acceptable source
          found := {r | current_region == correct_regions[_]; r = current_region}
          count(found) == 0

          correct_regions_list := {r | correct_regions[r]}
          msg := sprintf(
            "container %q uses incorrect registry for image: %s, replace %q with one of the following regions: %s",
            [container_name, image, current_region, sort(correct_regions_list)],
          )
        }
